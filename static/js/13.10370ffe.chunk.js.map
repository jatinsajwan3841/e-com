{"version":3,"sources":["actions/orderActions.js","components/orders/index.js"],"names":["createOrder","paymentInfo","dispatch","a","type","config","headers","orderInfo","JSON","parse","sessionStorage","getItem","orderItems","localStorage","forEach","item","product","_id","order","shippingInfo","axios","post","data","payload","removeItem","response","message","myOrders","get","orders","getOrderDetails","id","role","url","Orders","useDispatch","useSelector","state","columns","field","headerName","minWidth","flex","cellClassName","params","getValue","sortable","renderCell","to","rows","index","push","itemsQty","length","status","orderStatus","amount","totalPrice","React","useEffect","className","pageSize","rowsPerPageOptions","disableSelectionOnClick","autoHeight"],"mappings":"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","file":"static/js/13.10370ffe.chunk.js","sourcesContent":["import axios from \"../utils/axiosConfig\";\n\n// Create Order\nexport const createOrder = (paymentInfo) => async (dispatch) => {\n    try {\n        dispatch({ type: \"CREATE_ORDER_REQUEST\" });\n\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        };\n        const orderInfo = JSON.parse(sessionStorage.getItem(\"orderInfo\"));\n        const orderItems = JSON.parse(localStorage.getItem(\"cartItems\"));\n        orderItems.forEach((item) => {\n            item.product = item._id;\n            delete item._id;\n        });\n\n        const order = {\n            shippingInfo: JSON.parse(localStorage.getItem(\"shippingInfo\")),\n            orderItems: orderItems,\n            paymentInfo: paymentInfo,\n            ...orderInfo,\n        };\n        const { data } = await axios.post(\"/api/v1/order/new\", order, config);\n\n        dispatch({ type: \"CREATE_ORDER_SUCCESS\", payload: data });\n        localStorage.removeItem(\"cartItems\");\n        sessionStorage.removeItem(\"orderInfo\");\n        dispatch({ type: \"CLEAR_CART\" });\n    } catch (error) {\n        dispatch({\n            type: \"CREATE_ORDER_FAIL\",\n            payload: error.response.data.message,\n        });\n    }\n};\n\n// My Orders\nexport const myOrders = () => async (dispatch) => {\n    try {\n        dispatch({ type: \"MY_ORDERS_REQUEST\" });\n\n        const { data } = await axios.get(\"/api/v1/orders/me\");\n\n        dispatch({ type: \"MY_ORDERS_SUCCESS\", payload: data.orders });\n    } catch (error) {\n        dispatch({\n            type: \"MY_ORDERS_FAIL\",\n            payload: error.response.data.message,\n        });\n    }\n};\n\n// Get All Orders (admin)\nexport const getAllOrders = () => async (dispatch) => {\n    try {\n        dispatch({ type: \"ALL_ORDERS_REQUEST\" });\n\n        const { data } = await axios.get(\"/api/v1/admin/orders\");\n\n        dispatch({ type: \"ALL_ORDERS_SUCCESS\", payload: data.orders });\n    } catch (error) {\n        dispatch({\n            type: \"ALL_ORDERS_FAIL\",\n            payload: error.response.data.message,\n        });\n    }\n};\n\n// Update Order\nexport const updateOrder = (id, order) => async (dispatch) => {\n    try {\n        dispatch({ type: \"UPDATE_ORDER_REQUEST\" });\n\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        };\n        const { data } = await axios.put(\n            `/api/v1/admin/order/${id}`,\n            order,\n            config\n        );\n\n        dispatch({ type: \"UPDATE_ORDER_SUCCESS\", payload: data.success });\n    } catch (error) {\n        dispatch({\n            type: \"UPDATE_ORDER_FAIL\",\n            payload: error.response.data.message,\n        });\n    }\n};\n\n// Delete Order\nexport const deleteOrder = (id) => async (dispatch) => {\n    try {\n        dispatch({ type: \"DELETE_ORDER_REQUEST\" });\n\n        const { data } = await axios.delete(`/api/v1/admin/order/${id}`);\n\n        dispatch({ type: \"DELETE_ORDER_SUCCESS\", payload: data.success });\n    } catch (error) {\n        dispatch({\n            type: \"DELETE_ORDER_FAIL\",\n            payload: error.response.data.message,\n        });\n    }\n};\n\n// Get Order Details\nexport const getOrderDetails = (id, role) => async (dispatch) => {\n    try {\n        dispatch({ type: \"ORDER_DETAILS_REQUEST\" });\n        const url =\n            role === \"admin\"\n                ? `/api/v1/admin/order/${id}`\n                : `/api/v1/order/${id}`;\n        const { data } = await axios.get(url);\n\n        dispatch({ type: \"ORDER_DETAILS_SUCCESS\", payload: data.order });\n    } catch (error) {\n        dispatch({\n            type: \"ORDER_DETAILS_FAIL\",\n            payload: error.response.data.message,\n        });\n    }\n};\n\n// Clearing Errors\nexport const clearErrors = () => async (dispatch) => {\n    dispatch({ type: \"CLEAR_ERRORS\" });\n};\n","import React from \"react\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport { myOrders } from \"../../actions/orderActions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport NextWeekRoundedIcon from \"@mui/icons-material/NextWeekRounded\";\nimport \"./index.scss\";\n\nconst Orders = () => {\n    const dispatch = useDispatch();\n    const { orders } = useSelector((state) => state.myOrders);\n    const columns = [\n        { field: \"id\", headerName: \"Order ID\", minWidth: 300, flex: 1 },\n\n        {\n            field: \"status\",\n            headerName: \"Status\",\n            minWidth: 150,\n            flex: 0.5,\n            cellClassName: (params) => {\n                return params.getValue(params.id, \"status\") === \"Delivered\"\n                    ? \"greenColor\"\n                    : \"redColor\";\n            },\n        },\n        {\n            field: \"itemsQty\",\n            headerName: \"Items Qty\",\n            type: \"number\",\n            minWidth: 150,\n            flex: 0.2,\n        },\n\n        {\n            field: \"amount\",\n            headerName: \"â‚¹ Amount\",\n            type: \"number\",\n            minWidth: 270,\n            flex: 0.4,\n        },\n\n        {\n            field: \"details\",\n            flex: 0.1,\n            headerName: \"Details\",\n            minWidth: 150,\n            type: \"number\",\n            sortable: false,\n            renderCell: (params) => {\n                return (\n                    <Link to={`/order/${params.getValue(params.id, \"id\")}`}>\n                        <NextWeekRoundedIcon />\n                    </Link>\n                );\n            },\n        },\n    ];\n\n    const rows = [];\n\n    orders &&\n        orders.forEach((item, index) => {\n            rows.push({\n                itemsQty: item.orderItems.length,\n                id: item._id,\n                status: item.orderStatus,\n                amount: item.totalPrice,\n            });\n        });\n\n    React.useEffect(() => {\n        dispatch(myOrders());\n    }, [dispatch]);\n    return (\n        <div className=\"orders-container\">\n            <div className=\"title\">Orders</div>\n            <DataGrid\n                rows={rows}\n                columns={columns}\n                pageSize={10}\n                rowsPerPageOptions={[10]}\n                disableSelectionOnClick\n                autoHeight\n            />\n        </div>\n    );\n};\n\nexport default Orders;\n"],"sourceRoot":""}