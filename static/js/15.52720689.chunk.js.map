{"version":3,"sources":["actions/productActions.js","actions/cartActions.js","components/product/index.js"],"names":["getProduct","keyword","currentPage","price","category","ratings","dispatch","a","type","link","axios","get","data","payload","response","message","getProductDetails","id","product","newReview","reviewData","config","headers","put","success","addItemsToCart","quantity","getState","_id","name","image","images","url","stock","localStorage","setItem","JSON","stringify","cart","cartItems","removeCartItem","prod_id","saveShippingInfo","Product","React","useState","count","setCount","reviewOpen","setReviewOpen","rating","setRating","comment","setComment","useSelector","state","productDetails","isAuthenticated","user","loading","useDispatch","params","useParams","useEffect","title","className","src","alt","value","precision","readOnly","onClick","prev","disabled","alert","description","open","onClose","onChange","e","target","size","rows","color","productID","numOfReviews","reviews","map","val","key"],"mappings":"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","file":"static/js/15.52720689.chunk.js","sourcesContent":["import axios from \"../utils/axiosConfig\";\n\nexport const getProduct =\n    (\n        keyword = \"\",\n        currentPage = 1,\n        price = [0, 25000],\n        category,\n        ratings = 0\n    ) =>\n    async (dispatch) => {\n        try {\n            dispatch({\n                type: \"ALL_PRODUCT_REQUEST\",\n            });\n            let link = `/api/v1/products?keyword=${keyword}&page=${currentPage}&price[gte]=${price[0]}&price[lte]=${price[1]}&ratings[gte]=${ratings}`;\n\n            if (category) {\n                link = `/api/v1/products?keyword=${keyword}&page=${currentPage}&price[gte]=${price[0]}&price[lte]=${price[1]}&category=${category}&ratings[gte]=${ratings}`;\n            }\n            const { data } = await axios.get(link);\n            dispatch({\n                type: \"ALL_PRODUCT_SUCCESS\",\n                payload: data,\n            });\n        } catch (error) {\n            dispatch({\n                type: \"ALL_PRODUCT_FAIL\",\n                payload: error.response.data.message,\n            });\n        }\n    };\n\nexport const clearErrors = () => async (dispatch) => {\n    dispatch({ type: \"CLEAR_ERRORS\" });\n};\n\nexport const getProductDetails = (id) => async (dispatch) => {\n    try {\n        dispatch({\n            type: \"PRODUCT_DETAILS_REQUEST\",\n        });\n        const { data } = await axios.get(`/api/v1/product/${id}`);\n        dispatch({\n            type: \"PRODUCT_DETAILS_SUCCESS\",\n            payload: data.product,\n        });\n    } catch (error) {\n        dispatch({\n            type: \"PRODUCT_DETAILS_FAIL\",\n            payload: error.response.data.message,\n        });\n    }\n};\n\n// New Review\nexport const newReview = (reviewData) => async (dispatch) => {\n    try {\n        dispatch({ type: \"NEW_REVIEW_REQUEST\" });\n\n        const config = {\n            headers: { \"Content-Type\": \"application/json\" },\n        };\n\n        const { data } = await axios.put(`/api/v1/review`, reviewData, config);\n\n        dispatch({\n            type: \"NEW_REVIEW_SUCCESS\",\n            payload: data.success,\n        });\n    } catch (error) {\n        dispatch({\n            type: \"NEW_REVIEW_FAIL\",\n            payload: error.response.data.message,\n        });\n    }\n};\n","// add items to cart\nexport const addItemsToCart = (product, quantity) => (dispatch, getState) => {\n    dispatch({\n        type: \"ADD_TO_CART\",\n        payload: {\n            _id: product._id,\n            name: product.name,\n            price: product.price,\n            image: product.image || product?.images[0]?.url,\n            stock: product.stock,\n            quantity,\n        },\n    });\n    localStorage.setItem(\n        \"cartItems\",\n        JSON.stringify(getState().cart.cartItems)\n    );\n};\n\n// remove cart item\nexport const removeCartItem = (prod_id) => (dispatch, getState) => {\n    dispatch({\n        type: \"REMOVE_CART_ITEM\",\n        payload: prod_id,\n    });\n    localStorage.setItem(\n        \"cartItems\",\n        JSON.stringify(getState().cart.cartItems)\n    );\n};\n\n// save shipping info\nexport const saveShippingInfo = (data) => async (dispatch) => {\n    dispatch({\n        type: \"SAVE_SHIPPING_INFO\",\n        payload: data,\n    });\n\n    localStorage.setItem(\"shippingInfo\", JSON.stringify(data));\n};\n","import React from \"react\";\nimport MetaData from \"../../utils/metaData\";\nimport { getProductDetails, newReview } from \"../../actions/productActions\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport Rating from \"@mui/material/Rating\";\nimport { addItemsToCart } from \"../../actions/cartActions\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport Button from \"@mui/material/Button\";\nimport \"./index.scss\";\n\nconst Product = () => {\n    const [count, setCount] = React.useState(1);\n    const [reviewOpen, setReviewOpen] = React.useState(false);\n    const [rating, setRating] = React.useState(0);\n    const [comment, setComment] = React.useState(\"\");\n\n    const { product } = useSelector((state) => state.productDetails);\n    const { isAuthenticated } = useSelector((state) => state.user);\n    const { loading } = useSelector((state) => state.newReview);\n\n    const dispatch = useDispatch();\n    const params = useParams();\n\n    const cartHandler = () => {\n        if (count) {\n            dispatch(addItemsToCart(product, count));\n            alert(\"Product added to cart!\");\n        }\n    };\n\n    const reviewSubmitHandler = () => {\n        const data = {\n            productID: product._id,\n            rating: rating,\n            comment: comment,\n        };\n\n        dispatch(newReview(data));\n\n        setReviewOpen(false);\n        setRating(0);\n        setComment(\"\");\n    };\n\n    React.useEffect(() => {\n        dispatch(getProductDetails(params.id));\n    }, [dispatch, params.id, loading]);\n    return (\n        <>\n            {product && (\n                <>\n                    <MetaData title={product.name} />\n                    <div className=\"product-container\">\n                        <div className=\"product-image-holder\">\n                            <img\n                                src={product.images?.[0].url}\n                                className=\"product-image\"\n                                alt={product.name}\n                            />\n                        </div>\n                        <div className=\"product-details\">\n                            <div className=\"details\">\n                                <div className=\"product-name\">\n                                    {product.name}\n                                </div>\n                                <div className=\"product-id\">\n                                    Product ID: {product._id}\n                                </div>\n                            </div>\n                            <div className=\"details\">\n                                <Rating\n                                    name=\"read-only\"\n                                    value={product.ratings}\n                                    precision={0.5}\n                                    readOnly\n                                />\n                            </div>\n                            <div className=\"details\">\n                                <div className=\"amount\">\n                                    &#8377;{product.price}\n                                </div>\n                                <div className=\"order-count\">\n                                    <button\n                                        onClick={() =>\n                                            setCount((prev) => prev - 1)\n                                        }\n                                        disabled={count === 0}\n                                    >\n                                        -\n                                    </button>\n                                    {product.stock > 0 ? count : 0}\n                                    <button\n                                        onClick={() =>\n                                            setCount((prev) => prev + 1)\n                                        }\n                                        disabled={count === product.stock}\n                                    >\n                                        +\n                                    </button>\n                                    <button\n                                        className=\"add-to-cart\"\n                                        disabled={count === 0}\n                                        onClick={cartHandler}\n                                    >\n                                        Add to cart\n                                    </button>\n                                </div>\n                            </div>\n                            <div className=\"details\">\n                                Status:{\" \"}\n                                {product.stock > 0 ? (\n                                    <span className=\"green\">In stock</span>\n                                ) : (\n                                    <span className=\"tomato\">Out of stock</span>\n                                )}\n                            </div>\n                            <div className=\"details\">\n                                Description: {product.description}\n                            </div>\n                            {isAuthenticated === true && (\n                                <div className=\"details\">\n                                    <button\n                                        className=\"submit-review\"\n                                        onClick={() => setReviewOpen(true)}\n                                    >\n                                        Submit Review\n                                    </button>\n                                </div>\n                            )}\n                        </div>\n                    </div>\n\n                    <Dialog\n                        aria-labelledby=\"simple-dialog-title\"\n                        open={reviewOpen}\n                        onClose={() => setReviewOpen(false)}\n                    >\n                        <DialogTitle>Submit Review</DialogTitle>\n                        <DialogContent className=\"dialog\">\n                            <Rating\n                                onChange={(e) => setRating(e.target.value)}\n                                value={rating}\n                                size=\"large\"\n                            />\n\n                            <textarea\n                                className=\"dialog-text\"\n                                rows=\"8\"\n                                value={comment}\n                                onChange={(e) => setComment(e.target.value)}\n                            ></textarea>\n                        </DialogContent>\n                        <DialogActions>\n                            <Button\n                                onClick={() => setReviewOpen(false)}\n                                color=\"secondary\"\n                            >\n                                Cancel\n                            </Button>\n                            <Button\n                                onClick={reviewSubmitHandler}\n                                color=\"primary\"\n                            >\n                                Submit\n                            </Button>\n                        </DialogActions>\n                    </Dialog>\n\n                    <div className=\"reviews-container\">\n                        <div className=\"head\">Reviews ●'◡'●</div>\n                        <div className=\"reviews\">\n                            {product.numOfReviews > 0 ? (\n                                product.reviews.map((val, key) => (\n                                    <div key={key} className=\"review\">\n                                        <div className=\"name\">\n                                            <span className=\"avatar\"> </span>\n                                            {val.name}\n                                        </div>\n                                        <div>\n                                            <Rating\n                                                name=\"read-only\"\n                                                value={val.rating}\n                                                precision={0.5}\n                                                size=\"small\"\n                                                readOnly\n                                            />\n                                        </div>\n                                        <div className=\"comment\">\n                                            {val.comment}\n                                        </div>\n                                    </div>\n                                ))\n                            ) : (\n                                <div className=\"no-reviews\">No Reviews Yet</div>\n                            )}\n                        </div>\n                    </div>\n                </>\n            )}\n        </>\n    );\n};\n\nexport default Product;\n"],"sourceRoot":""}